stages:
  - build
  - test
  - package
  - deploy

build_pyden_splunk:
  stage: build
  image: docker
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY/badarsebard/pyden-suite/pyden-splunk:latest -f splunk.dockerfile .
    - docker push $CI_REGISTRY/badarsebard/pyden-suite/pyden-splunk:latest
  only:
    changes:
      - scripts/splunk_docker_prep.sh
      - scripts/splunk_local_config.sh
      - splunk.dockerfile
  tags:
    - docker

build_pyden_selenium:
  stage: build
  image: docker
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY/badarsebard/pyden-suite/pyden-selenium:latest -f selenium.dockerfile .
    - docker push $CI_REGISTRY/badarsebard/pyden-suite/pyden-selenium:latest
  only:
    changes:
      - scripts/selenium_docker_prep.sh
      - selenium.dockerfile
  tags:
    - docker

execute_test_suite_python2:
  stage: test
  image: $CI_REGISTRY/badarsebard/pyden-suite/pyden-selenium:latest
  services:
    - name: $CI_REGISTRY/badarsebard/pyden-suite/pyden-splunk:latest
      alias: pyden-splunk
  variables:
    SPLUNK_PASSWORD: "changeme1"
    SPLUNK_START_ARGS: "--accept-license"
    SPLUNK_ANSIBLE_POST_TASKS: "file:///tmp/splunk_ansible_prep.yml"
    SPLUNK_ANSIBLE_ENV: "SPLUNK_PY_VERSION=python2"
  script:
    - python3 $CI_PROJECT_DIR/test/auto.py
  artifacts:
    when: on_failure
    paths:
      - artifacts/
  tags:
    - docker

execute_test_suite_python3:
  stage: test
  image: $CI_REGISTRY/badarsebard/pyden-suite/pyden-selenium:latest
  services:
    - name: $CI_REGISTRY/badarsebard/pyden-suite/pyden-splunk:latest
      alias: pyden-splunk
  variables:
    SPLUNK_PASSWORD: "changeme1"
    SPLUNK_START_ARGS: "--accept-license"
    SPLUNK_ANSIBLE_POST_TASKS: "file:///tmp/splunk_ansible_prep.yml"
    SPLUNK_ANSIBLE_ENV: "SPLUNK_PY_VERSION=python3"
  script:
    - python3 $CI_PROJECT_DIR/test/auto.py
  artifacts:
    when: on_failure
    paths:
      - artifacts/
  tags:
    - docker

appinspect:
  stage: package
  image: python
  script:
    # first two lines are needed because when gitlab clones the repo it does so with a different set of permissions
    - find src -type d -exec chmod 0755 {} +
    - find src -type f -exec chmod 0644 {} +
    - tar -czvf pyden.tgz -C src pyden
    - tar -czvf pyden-manager.tgz -C src pyden-manager
    - scripts/submit-app.sh pyden
    - pyden_failures=$(echo $?)
    - scripts/submit-app.sh pyden-manager
    - manager_failures=$(echo $?)
    - x=$(( $pyden_failures + $manager_failures ))
    - if [[ $x -gt 0 ]]; then echo "There were $x failures in apps."; exit 1; fi
  artifacts:
    when: always
    paths:
      - pyden.html
      - pyden-manager.html
      - pyden.tgz
      - pyden-manager.tgz
  only:
    - tags
    - master
  tags:
    - docker

splunkbase:
  stage: deploy
  image: pyhton
  variables:
    SUPPORTED_VERSIONS: "7.2,7.3"
  script:
    - curl -u ${SPLUNK_CREDS} --request POST https://splunkbase.splunk.com/api/v1/app/4322/new_release/ -F "files[]=@pyden.tgz" -F "filename=pyden.tgz" -F "splunk_versions=${SUPPORTED_VERSIONS}" -F "visibility=true"
    - curl -u ${SPLUNK_CREDS} --request POST https://splunkbase.splunk.com/api/v1/app/4323/new_release/ -F "files[]=@pyden-manager.tgz" -F "filename=pyden-manager.tgz" -F "splunk_versions=${SUPPORTED_VERSIONS}" -F "visibility=true"
  only:
    - tags
  tags:
    - docker